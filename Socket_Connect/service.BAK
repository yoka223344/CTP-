#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <iostream>
#include <pthread.h>
using namespace std;
void *make_action(void *contract)
{
	int *contractFD = (int *) contract;
	char Instrument[7];
	read(*contractFD, Instrument, 7);
	cout << Instrument <<endl;
	sleep(20);
	cout << "start" <<endl;
	char str[] = "success";
	write(*contractFD, str, 10);
	close(*contractFD);
}
int main(void)
{
	pthread_t t1;
	int *fdptr;
	struct sockaddr_in stSockAddr;
    int SocketFD = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
    if(-1 == SocketFD)
    {
		perror("can not create socket");
		exit(EXIT_FAILURE);
    }
    memset(&stSockAddr, 0, sizeof(stSockAddr));
    stSockAddr.sin_family = AF_INET;
    stSockAddr.sin_port = htons(9000);
    stSockAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    if(-1 == bind(SocketFD,(struct sockaddr *)&stSockAddr, sizeof(stSockAddr)))
    {
		perror("error bind failed");
		close(SocketFD);
		exit(EXIT_FAILURE);
    }
    if(-1 == listen(SocketFD, 10))
    {
		perror("error listen failed");
		close(SocketFD);
		exit(EXIT_FAILURE);
    }
    while(1)
    {
		int ConnectFD = accept(SocketFD, NULL, NULL);
		fdptr = (int *)malloc(sizeof(int));
		*fdptr = ConnectFD;
		if(0 > ConnectFD)
		{
			perror("error accept failed");
			close(SocketFD);
			exit(EXIT_FAILURE);
		}
		pthread_create(&t1, NULL, make_action,(void *)fdptr);
	}
	close(SocketFD);
    return EXIT_SUCCESS;
}
